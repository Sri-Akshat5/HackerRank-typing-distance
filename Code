import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'getDistance' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING word as parameter.
     */

    public static int getDistance(String word) {
    // Write your code here
       Map<Character, int[]> keyboard = new HashMap<>();
        keyboard.put('Q', new int[]{0, 0}); keyboard.put('W', new int[]{0, 1});
        keyboard.put('E', new int[]{0, 2}); keyboard.put('R', new int[]{0, 3});
        keyboard.put('T', new int[]{0, 4}); keyboard.put('Y', new int[]{0, 5});
        keyboard.put('U', new int[]{0, 6}); keyboard.put('I', new int[]{0, 7});
        keyboard.put('O', new int[]{0, 8}); keyboard.put('P', new int[]{0, 9});
        keyboard.put('A', new int[]{1, 0}); keyboard.put('S', new int[]{1, 1});
        keyboard.put('D', new int[]{1, 2}); keyboard.put('F', new int[]{1, 3});
        keyboard.put('G', new int[]{1, 4}); keyboard.put('H', new int[]{1, 5});
        keyboard.put('J', new int[]{1, 6}); keyboard.put('K', new int[]{1, 7});
        keyboard.put('L', new int[]{1, 8});
        keyboard.put('Z', new int[]{2, 0}); keyboard.put('X', new int[]{2, 1});
        keyboard.put('C', new int[]{2, 2}); keyboard.put('V', new int[]{2, 3});
        keyboard.put('B', new int[]{2, 4}); keyboard.put('N', new int[]{2, 5});
        keyboard.put('M', new int[]{2, 6});
        int[] currentPosition = keyboard.get('Q');
        int totalDistance = 0;
        for (char c : word.toCharArray()) {
            int[] newPosition = keyboard.get(c);
            int rowDist = Math.abs(newPosition[0] - currentPosition[0]);
            int colDist = Math.abs(newPosition[1] - currentPosition[1]);
            totalDistance += rowDist + colDist; 
            currentPosition = newPosition;
        }
        return totalDistance;
    }
}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String word = bufferedReader.readLine();

        int result = Result.getDistance(word);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
